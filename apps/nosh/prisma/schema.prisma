datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Product {
  createdAt   DateTime      @default(now())
  id          String        @id @default(cuid())
  option      Option[]
  productCart ProductCart[]
  updatedAt   DateTime      @updatedAt
}

model ProductCart {
  createdAt          DateTime            @default(now())
  id                 String              @id @default(cuid())
  product            Product?            @relation(fields: [productId], references: [id])
  productId          String?
  productCartOptions ProductCartOption[]
  updatedAt          DateTime            @updatedAt
}

model Option {
  createdAt          DateTime            @default(now())
  id                 String              @id @default(cuid())
  product            Product?            @relation(fields: [productId], references: [id])
  productId          String?
  productCartOptions ProductCartOption[]
  suboptions         Suboption[]
  updatedAt          DateTime            @updatedAt
}

model Suboption {
  createdAt             DateTime               @default(now())
  id                    String                 @id @default(cuid())
  option                Option?                @relation(fields: [optionId], references: [id])
  optionId              String?
  productCartSuboptions ProductCartSuboption[]
  updatedAt             DateTime               @updatedAt
}

model ProductCartSuboption {
  createdAt          DateTime            @default(now())
  id                 String              @id @default(cuid())
  position           String?
  price              Float?
  productCartOptions ProductCartOption[]
  quantity           Int
  selected           Boolean
  suboption          Suboption?          @relation(fields: [suboptionId], references: [id])
  suboptionId        String?
  total              String?
  updatedAt          DateTime            @updatedAt
}

model ProductCartOption {
  balance              Int?
  createdAt            DateTime               @default(now())
  id                   String                 @id @default(cuid())
  option               Option?                @relation(fields: [optionId], references: [id])
  optionId             String?
  productCart          ProductCart?           @relation(fields: [productCartId], references: [id])
  productCartId        String?
  productCartSuboption ProductCartSuboption[]
  updatedAt            DateTime               @updatedAt
}
