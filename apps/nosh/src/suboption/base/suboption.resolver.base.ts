/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSuboptionArgs } from "./CreateSuboptionArgs";
import { UpdateSuboptionArgs } from "./UpdateSuboptionArgs";
import { DeleteSuboptionArgs } from "./DeleteSuboptionArgs";
import { SuboptionFindManyArgs } from "./SuboptionFindManyArgs";
import { SuboptionFindUniqueArgs } from "./SuboptionFindUniqueArgs";
import { Suboption } from "./Suboption";
import { ProductCartSuboptionFindManyArgs } from "../../productCartSuboption/base/ProductCartSuboptionFindManyArgs";
import { ProductCartSuboption } from "../../productCartSuboption/base/ProductCartSuboption";
import { Option } from "../../option/base/Option";
import { SuboptionService } from "../suboption.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Suboption)
export class SuboptionResolverBase {
  constructor(
    protected readonly service: SuboptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "read",
    possession: "any",
  })
  async _suboptionsMeta(
    @graphql.Args() args: SuboptionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Suboption])
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "read",
    possession: "any",
  })
  async suboptions(
    @graphql.Args() args: SuboptionFindManyArgs
  ): Promise<Suboption[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Suboption, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "read",
    possession: "own",
  })
  async suboption(
    @graphql.Args() args: SuboptionFindUniqueArgs
  ): Promise<Suboption | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Suboption)
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "create",
    possession: "any",
  })
  async createSuboption(
    @graphql.Args() args: CreateSuboptionArgs
  ): Promise<Suboption> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        option: args.data.option
          ? {
              connect: args.data.option,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Suboption)
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "update",
    possession: "any",
  })
  async updateSuboption(
    @graphql.Args() args: UpdateSuboptionArgs
  ): Promise<Suboption | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          option: args.data.option
            ? {
                connect: args.data.option,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Suboption)
  @nestAccessControl.UseRoles({
    resource: "Suboption",
    action: "delete",
    possession: "any",
  })
  async deleteSuboption(
    @graphql.Args() args: DeleteSuboptionArgs
  ): Promise<Suboption | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductCartSuboption], {
    name: "productCartSuboptions",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductCartSuboption",
    action: "read",
    possession: "any",
  })
  async resolveFieldProductCartSuboptions(
    @graphql.Parent() parent: Suboption,
    @graphql.Args() args: ProductCartSuboptionFindManyArgs
  ): Promise<ProductCartSuboption[]> {
    const results = await this.service.findProductCartSuboptions(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Option, {
    nullable: true,
    name: "option",
  })
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "any",
  })
  async resolveFieldOption(
    @graphql.Parent() parent: Suboption
  ): Promise<Option | null> {
    const result = await this.service.getOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
