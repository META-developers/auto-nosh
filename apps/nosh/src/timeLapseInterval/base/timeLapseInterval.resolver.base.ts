/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTimeLapseIntervalArgs } from "./CreateTimeLapseIntervalArgs";
import { UpdateTimeLapseIntervalArgs } from "./UpdateTimeLapseIntervalArgs";
import { DeleteTimeLapseIntervalArgs } from "./DeleteTimeLapseIntervalArgs";
import { TimeLapseIntervalCountArgs } from "./TimeLapseIntervalCountArgs";
import { TimeLapseIntervalFindManyArgs } from "./TimeLapseIntervalFindManyArgs";
import { TimeLapseIntervalFindUniqueArgs } from "./TimeLapseIntervalFindUniqueArgs";
import { TimeLapseInterval } from "./TimeLapseInterval";
import { TimeLapse } from "../../timeLapse/base/TimeLapse";
import { TimeLapseIntervalService } from "../timeLapseInterval.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeLapseInterval)
export class TimeLapseIntervalResolverBase {
  constructor(
    protected readonly service: TimeLapseIntervalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "read",
    possession: "any",
  })
  async _timeLapseIntervalsMeta(
    @graphql.Args() args: TimeLapseIntervalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeLapseInterval])
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "read",
    possession: "any",
  })
  async timeLapseIntervals(
    @graphql.Args() args: TimeLapseIntervalFindManyArgs
  ): Promise<TimeLapseInterval[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeLapseInterval, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "read",
    possession: "own",
  })
  async timeLapseInterval(
    @graphql.Args() args: TimeLapseIntervalFindUniqueArgs
  ): Promise<TimeLapseInterval | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeLapseInterval)
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "create",
    possession: "any",
  })
  async createTimeLapseInterval(
    @graphql.Args() args: CreateTimeLapseIntervalArgs
  ): Promise<TimeLapseInterval> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeLapseClose: {
          connect: args.data.timeLapseClose,
        },

        timeLapsesOpen: {
          connect: args.data.timeLapsesOpen,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeLapseInterval)
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "update",
    possession: "any",
  })
  async updateTimeLapseInterval(
    @graphql.Args() args: UpdateTimeLapseIntervalArgs
  ): Promise<TimeLapseInterval | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeLapseClose: {
            connect: args.data.timeLapseClose,
          },

          timeLapsesOpen: {
            connect: args.data.timeLapsesOpen,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeLapseInterval)
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "delete",
    possession: "any",
  })
  async deleteTimeLapseInterval(
    @graphql.Args() args: DeleteTimeLapseIntervalArgs
  ): Promise<TimeLapseInterval | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeLapse, {
    nullable: true,
    name: "timeLapseClose",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async resolveFieldTimeLapseClose(
    @graphql.Parent() parent: TimeLapseInterval
  ): Promise<TimeLapse | null> {
    const result = await this.service.getTimeLapseClose(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeLapse, {
    nullable: true,
    name: "timeLapsesOpen",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async resolveFieldTimeLapsesOpen(
    @graphql.Parent() parent: TimeLapseInterval
  ): Promise<TimeLapse | null> {
    const result = await this.service.getTimeLapsesOpen(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
