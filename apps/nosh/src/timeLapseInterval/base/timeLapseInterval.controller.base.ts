/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TimeLapseIntervalService } from "../timeLapseInterval.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TimeLapseIntervalCreateInput } from "./TimeLapseIntervalCreateInput";
import { TimeLapseIntervalWhereInput } from "./TimeLapseIntervalWhereInput";
import { TimeLapseIntervalWhereUniqueInput } from "./TimeLapseIntervalWhereUniqueInput";
import { TimeLapseIntervalFindManyArgs } from "./TimeLapseIntervalFindManyArgs";
import { TimeLapseIntervalUpdateInput } from "./TimeLapseIntervalUpdateInput";
import { TimeLapseInterval } from "./TimeLapseInterval";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TimeLapseIntervalControllerBase {
  constructor(
    protected readonly service: TimeLapseIntervalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeLapseInterval })
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: TimeLapseIntervalCreateInput
  ): Promise<TimeLapseInterval> {
    return await this.service.create({
      data: {
        ...data,

        timeLapseClose: {
          connect: data.timeLapseClose,
        },

        timeLapsesOpen: {
          connect: data.timeLapsesOpen,
        },
      },
      select: {
        hour: true,
        id: true,
        minute: true,

        timeLapseClose: {
          select: {
            id: true,
          },
        },

        timeLapsesOpen: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeLapseInterval] })
  @ApiNestedQuery(TimeLapseIntervalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<TimeLapseInterval[]> {
    const args = plainToClass(TimeLapseIntervalFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        hour: true,
        id: true,
        minute: true,

        timeLapseClose: {
          select: {
            id: true,
          },
        },

        timeLapsesOpen: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeLapseInterval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: TimeLapseIntervalWhereUniqueInput
  ): Promise<TimeLapseInterval | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        hour: true,
        id: true,
        minute: true,

        timeLapseClose: {
          select: {
            id: true,
          },
        },

        timeLapsesOpen: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeLapseInterval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: TimeLapseIntervalWhereUniqueInput,
    @common.Body() data: TimeLapseIntervalUpdateInput
  ): Promise<TimeLapseInterval | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          timeLapseClose: {
            connect: data.timeLapseClose,
          },

          timeLapsesOpen: {
            connect: data.timeLapsesOpen,
          },
        },
        select: {
          hour: true,
          id: true,
          minute: true,

          timeLapseClose: {
            select: {
              id: true,
            },
          },

          timeLapsesOpen: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeLapseInterval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeLapseInterval",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: TimeLapseIntervalWhereUniqueInput
  ): Promise<TimeLapseInterval | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          hour: true,
          id: true,
          minute: true,

          timeLapseClose: {
            select: {
              id: true,
            },
          },

          timeLapsesOpen: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
