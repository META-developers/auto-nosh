/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOpenTimeArgs } from "./CreateOpenTimeArgs";
import { UpdateOpenTimeArgs } from "./UpdateOpenTimeArgs";
import { DeleteOpenTimeArgs } from "./DeleteOpenTimeArgs";
import { OpenTimeCountArgs } from "./OpenTimeCountArgs";
import { OpenTimeFindManyArgs } from "./OpenTimeFindManyArgs";
import { OpenTimeFindUniqueArgs } from "./OpenTimeFindUniqueArgs";
import { OpenTime } from "./OpenTime";
import { TimeLapse } from "../../timeLapse/base/TimeLapse";
import { OpenTimeService } from "../openTime.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OpenTime)
export class OpenTimeResolverBase {
  constructor(
    protected readonly service: OpenTimeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "read",
    possession: "any",
  })
  async _openTimesMeta(
    @graphql.Args() args: OpenTimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OpenTime])
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "read",
    possession: "any",
  })
  async openTimes(
    @graphql.Args() args: OpenTimeFindManyArgs
  ): Promise<OpenTime[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OpenTime, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "read",
    possession: "own",
  })
  async openTime(
    @graphql.Args() args: OpenTimeFindUniqueArgs
  ): Promise<OpenTime | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OpenTime)
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "create",
    possession: "any",
  })
  async createOpenTime(
    @graphql.Args() args: CreateOpenTimeArgs
  ): Promise<OpenTime> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeLapse: {
          connect: args.data.timeLapse,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OpenTime)
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "update",
    possession: "any",
  })
  async updateOpenTime(
    @graphql.Args() args: UpdateOpenTimeArgs
  ): Promise<OpenTime | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeLapse: {
            connect: args.data.timeLapse,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OpenTime)
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "delete",
    possession: "any",
  })
  async deleteOpenTime(
    @graphql.Args() args: DeleteOpenTimeArgs
  ): Promise<OpenTime | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeLapse, {
    nullable: true,
    name: "timeLapse",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async resolveFieldTimeLapse(
    @graphql.Parent() parent: OpenTime
  ): Promise<TimeLapse | null> {
    const result = await this.service.getTimeLapse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
