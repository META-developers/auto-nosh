/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTimeLapseArgs } from "./CreateTimeLapseArgs";
import { UpdateTimeLapseArgs } from "./UpdateTimeLapseArgs";
import { DeleteTimeLapseArgs } from "./DeleteTimeLapseArgs";
import { TimeLapseCountArgs } from "./TimeLapseCountArgs";
import { TimeLapseFindManyArgs } from "./TimeLapseFindManyArgs";
import { TimeLapseFindUniqueArgs } from "./TimeLapseFindUniqueArgs";
import { TimeLapse } from "./TimeLapse";
import { CloseTime } from "../../closeTime/base/CloseTime";
import { OpenTime } from "../../openTime/base/OpenTime";
import { TimeLapseService } from "../timeLapse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeLapse)
export class TimeLapseResolverBase {
  constructor(
    protected readonly service: TimeLapseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async _timeLapsesMeta(
    @graphql.Args() args: TimeLapseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeLapse])
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async timeLapses(
    @graphql.Args() args: TimeLapseFindManyArgs
  ): Promise<TimeLapse[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeLapse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "own",
  })
  async timeLapse(
    @graphql.Args() args: TimeLapseFindUniqueArgs
  ): Promise<TimeLapse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeLapse)
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "create",
    possession: "any",
  })
  async createTimeLapse(
    @graphql.Args() args: CreateTimeLapseArgs
  ): Promise<TimeLapse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        close: {
          connect: args.data.close,
        },

        open: {
          connect: args.data.open,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeLapse)
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "update",
    possession: "any",
  })
  async updateTimeLapse(
    @graphql.Args() args: UpdateTimeLapseArgs
  ): Promise<TimeLapse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          close: {
            connect: args.data.close,
          },

          open: {
            connect: args.data.open,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeLapse)
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "delete",
    possession: "any",
  })
  async deleteTimeLapse(
    @graphql.Args() args: DeleteTimeLapseArgs
  ): Promise<TimeLapse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CloseTime, {
    nullable: true,
    name: "close",
  })
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "read",
    possession: "any",
  })
  async resolveFieldClose(
    @graphql.Parent() parent: TimeLapse
  ): Promise<CloseTime | null> {
    const result = await this.service.getClose(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OpenTime, {
    nullable: true,
    name: "open",
  })
  @nestAccessControl.UseRoles({
    resource: "OpenTime",
    action: "read",
    possession: "any",
  })
  async resolveFieldOpen(
    @graphql.Parent() parent: TimeLapse
  ): Promise<OpenTime | null> {
    const result = await this.service.getOpen(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
