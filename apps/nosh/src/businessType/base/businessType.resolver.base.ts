/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBusinessTypeArgs } from "./CreateBusinessTypeArgs";
import { UpdateBusinessTypeArgs } from "./UpdateBusinessTypeArgs";
import { DeleteBusinessTypeArgs } from "./DeleteBusinessTypeArgs";
import { BusinessTypeCountArgs } from "./BusinessTypeCountArgs";
import { BusinessTypeFindManyArgs } from "./BusinessTypeFindManyArgs";
import { BusinessTypeFindUniqueArgs } from "./BusinessTypeFindUniqueArgs";
import { BusinessType } from "./BusinessType";
import { BusinessFindManyArgs } from "../../business/base/BusinessFindManyArgs";
import { Business } from "../../business/base/Business";
import { BusinessTypeService } from "../businessType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BusinessType)
export class BusinessTypeResolverBase {
  constructor(
    protected readonly service: BusinessTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "read",
    possession: "any",
  })
  async _businessTypesMeta(
    @graphql.Args() args: BusinessTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BusinessType])
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "read",
    possession: "any",
  })
  async businessTypes(
    @graphql.Args() args: BusinessTypeFindManyArgs
  ): Promise<BusinessType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BusinessType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "read",
    possession: "own",
  })
  async businessType(
    @graphql.Args() args: BusinessTypeFindUniqueArgs
  ): Promise<BusinessType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BusinessType)
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "create",
    possession: "any",
  })
  async createBusinessType(
    @graphql.Args() args: CreateBusinessTypeArgs
  ): Promise<BusinessType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BusinessType)
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "update",
    possession: "any",
  })
  async updateBusinessType(
    @graphql.Args() args: UpdateBusinessTypeArgs
  ): Promise<BusinessType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BusinessType)
  @nestAccessControl.UseRoles({
    resource: "BusinessType",
    action: "delete",
    possession: "any",
  })
  async deleteBusinessType(
    @graphql.Args() args: DeleteBusinessTypeArgs
  ): Promise<BusinessType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Business], { name: "business" })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "any",
  })
  async resolveFieldBusiness(
    @graphql.Parent() parent: BusinessType,
    @graphql.Args() args: BusinessFindManyArgs
  ): Promise<Business[]> {
    const results = await this.service.findBusiness(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
