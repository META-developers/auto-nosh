/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCloseTimeArgs } from "./CreateCloseTimeArgs";
import { UpdateCloseTimeArgs } from "./UpdateCloseTimeArgs";
import { DeleteCloseTimeArgs } from "./DeleteCloseTimeArgs";
import { CloseTimeCountArgs } from "./CloseTimeCountArgs";
import { CloseTimeFindManyArgs } from "./CloseTimeFindManyArgs";
import { CloseTimeFindUniqueArgs } from "./CloseTimeFindUniqueArgs";
import { CloseTime } from "./CloseTime";
import { TimeLapse } from "../../timeLapse/base/TimeLapse";
import { CloseTimeService } from "../closeTime.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CloseTime)
export class CloseTimeResolverBase {
  constructor(
    protected readonly service: CloseTimeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "read",
    possession: "any",
  })
  async _closeTimesMeta(
    @graphql.Args() args: CloseTimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CloseTime])
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "read",
    possession: "any",
  })
  async closeTimes(
    @graphql.Args() args: CloseTimeFindManyArgs
  ): Promise<CloseTime[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CloseTime, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "read",
    possession: "own",
  })
  async closeTime(
    @graphql.Args() args: CloseTimeFindUniqueArgs
  ): Promise<CloseTime | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CloseTime)
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "create",
    possession: "any",
  })
  async createCloseTime(
    @graphql.Args() args: CreateCloseTimeArgs
  ): Promise<CloseTime> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        timeLapse: {
          connect: args.data.timeLapse,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CloseTime)
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "update",
    possession: "any",
  })
  async updateCloseTime(
    @graphql.Args() args: UpdateCloseTimeArgs
  ): Promise<CloseTime | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          timeLapse: {
            connect: args.data.timeLapse,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CloseTime)
  @nestAccessControl.UseRoles({
    resource: "CloseTime",
    action: "delete",
    possession: "any",
  })
  async deleteCloseTime(
    @graphql.Args() args: DeleteCloseTimeArgs
  ): Promise<CloseTime | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeLapse, {
    nullable: true,
    name: "timeLapse",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeLapse",
    action: "read",
    possession: "any",
  })
  async resolveFieldTimeLapse(
    @graphql.Parent() parent: CloseTime
  ): Promise<TimeLapse | null> {
    const result = await this.service.getTimeLapse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
