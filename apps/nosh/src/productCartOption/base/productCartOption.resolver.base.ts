/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductCartOptionArgs } from "./CreateProductCartOptionArgs";
import { UpdateProductCartOptionArgs } from "./UpdateProductCartOptionArgs";
import { DeleteProductCartOptionArgs } from "./DeleteProductCartOptionArgs";
import { ProductCartOptionFindManyArgs } from "./ProductCartOptionFindManyArgs";
import { ProductCartOptionFindUniqueArgs } from "./ProductCartOptionFindUniqueArgs";
import { ProductCartOption } from "./ProductCartOption";
import { Option } from "../../option/base/Option";
import { ProductCartOptionService } from "../productCartOption.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductCartOption)
export class ProductCartOptionResolverBase {
  constructor(
    protected readonly service: ProductCartOptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "read",
    possession: "any",
  })
  async _productCartOptionsMeta(
    @graphql.Args() args: ProductCartOptionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductCartOption])
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "read",
    possession: "any",
  })
  async productCartOptions(
    @graphql.Args() args: ProductCartOptionFindManyArgs
  ): Promise<ProductCartOption[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductCartOption, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "read",
    possession: "own",
  })
  async productCartOption(
    @graphql.Args() args: ProductCartOptionFindUniqueArgs
  ): Promise<ProductCartOption | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductCartOption)
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "create",
    possession: "any",
  })
  async createProductCartOption(
    @graphql.Args() args: CreateProductCartOptionArgs
  ): Promise<ProductCartOption> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        option: args.data.option
          ? {
              connect: args.data.option,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductCartOption)
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "update",
    possession: "any",
  })
  async updateProductCartOption(
    @graphql.Args() args: UpdateProductCartOptionArgs
  ): Promise<ProductCartOption | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          option: args.data.option
            ? {
                connect: args.data.option,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductCartOption)
  @nestAccessControl.UseRoles({
    resource: "ProductCartOption",
    action: "delete",
    possession: "any",
  })
  async deleteProductCartOption(
    @graphql.Args() args: DeleteProductCartOptionArgs
  ): Promise<ProductCartOption | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Option, {
    nullable: true,
    name: "option",
  })
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "any",
  })
  async resolveFieldOption(
    @graphql.Parent() parent: ProductCartOption
  ): Promise<Option | null> {
    const result = await this.service.getOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
