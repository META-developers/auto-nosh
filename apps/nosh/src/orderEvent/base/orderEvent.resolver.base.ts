/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrderEventArgs } from "./CreateOrderEventArgs";
import { UpdateOrderEventArgs } from "./UpdateOrderEventArgs";
import { DeleteOrderEventArgs } from "./DeleteOrderEventArgs";
import { OrderEventCountArgs } from "./OrderEventCountArgs";
import { OrderEventFindManyArgs } from "./OrderEventFindManyArgs";
import { OrderEventFindUniqueArgs } from "./OrderEventFindUniqueArgs";
import { OrderEvent } from "./OrderEvent";
import { Order } from "../../order/base/Order";
import { OrderEventService } from "../orderEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderEvent)
export class OrderEventResolverBase {
  constructor(
    protected readonly service: OrderEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "read",
    possession: "any",
  })
  async _orderEventsMeta(
    @graphql.Args() args: OrderEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderEvent])
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "read",
    possession: "any",
  })
  async orderEvents(
    @graphql.Args() args: OrderEventFindManyArgs
  ): Promise<OrderEvent[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "read",
    possession: "own",
  })
  async orderEvent(
    @graphql.Args() args: OrderEventFindUniqueArgs
  ): Promise<OrderEvent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderEvent)
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "create",
    possession: "any",
  })
  async createOrderEvent(
    @graphql.Args() args: CreateOrderEventArgs
  ): Promise<OrderEvent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        order: {
          connect: args.data.order,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderEvent)
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "update",
    possession: "any",
  })
  async updateOrderEvent(
    @graphql.Args() args: UpdateOrderEventArgs
  ): Promise<OrderEvent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          order: {
            connect: args.data.order,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderEvent)
  @nestAccessControl.UseRoles({
    resource: "OrderEvent",
    action: "delete",
    possession: "any",
  })
  async deleteOrderEvent(
    @graphql.Args() args: DeleteOrderEventArgs
  ): Promise<OrderEvent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async resolveFieldOrder(
    @graphql.Parent() parent: OrderEvent
  ): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
